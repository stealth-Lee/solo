<template>
  <el-drawer :title="formTitle" v-model="visible" width="600">
    <el-form
      ref="formRef"
      :model="formModel"
      :rules="formRules"
      v-loading="formLoading"
      label-width="82px"
    >
#foreach ($column in $columns)
  #if (${column.isCreate})
    #if ($column.FormType == 'INPUT')
      <el-form-item label="${column.javaComment}" prop="${column.javaField}">
        <el-input
          v-model="formModel.${column.javaField}"
          placeholder="请输入${column.javaComment}"
          clearable
        />
      </el-form-item>
    #elseif ($column.FormType == 'TEXTAREA')
      <el-form-item label="${column.javaComment}" prop="${column.javaField}">
        <el-input
          v-model="formModel.${column.javaField}"
          placeholder="请输入${column.javaComment}"
          type="textarea"
        />
      </el-form-item>
    #elseif ($column.FormType == 'SELECT')
      <el-form-item label="${column.javaComment}：" prop="${column.javaField}">
        <el-select
          v-model="formModel.${column.javaField}"
          placeholder="请选择${column.javaComment}"
          clearable
        >
          <el-option
            v-for="dict in ${column.dictCode}"
            :key="dict.value"
            :label="dict.label"
            :value="dict.value"
          />
        </el-select>
      </el-form-item>
    #elseif ($column.FormType == 'RADIO')
      <el-form-item label="${column.javaComment}" prop="${column.javaField}">
        <el-radio-group v-model="formModel.${column.javaField}">
          <el-radio-button
            v-for="(item, index) in ${column.dictCode}"
            :label="item.value"
            :key="index"
            >{{ item.label }}
          </el-radio-button>
        </el-radio-group>
      </el-form-item>
    #elseif ($column.FormType == 'switch')
      <el-form-item label="${column.javaComment}" prop="${column.javaField}">
        <el-switch
          v-model="formModel.${column.javaField}"
          active-value="1"
          inactive-value="0"
        />
      </el-form-item>
    #end
  #end
#end
    </el-form>
    <template #footer>
      <span class="dialog-footer">
        <el-button @click="visible = false">取消</el-button>
        <el-button type="primary" @click="handleSubmit">确定</el-button>
      </span>
    </template>
  </el-drawer>
</template>

<script setup lang="ts">
import { getting, creating, updating } from "@/api/${table.moduleName}/${table.businessName}";

defineOptions({ name: "${table.className}Form" });

#if ($dictColumns.size() > 0)
const {
  #foreach ($column in $dictColumns)
  ${column.dictCode}#if ($foreach.last)#else,#end
  #end
} = useDict(
  #foreach ($column in $dictColumns)
  "${column.dictCode}"#if ($foreach.last)#else,#end
  #end
);
#end
const message = useMessage();
const formRef = ref();
const visible = ref(false);
const formLoading = ref(false);
const formTitle = ref("");
const formModel = reactive({
#foreach ($column in $columns)
#if (${column.isUpdate})
  ${column.javaField}: #if (${column.JavaType} == 'STRING')""#else'undefined'#end#if ($foreach.last)#else,#end
#end
#end
});

// 自定义表单规则校验
const formRules = reactive({
#foreach ($column in $columns)
  #if (($column.isCreate || $column.isUpdate) && !${column.isPk} && ${column.isRequired})
  ${column.javaField}: [{ required: true, message: "${column.javaComment}为必填项", trigger: "blur" }]#if ($foreach.last)#else,#end
  #end
#end
});

// 打开弹框
const openDialog = async (title: string, id?: number) => {
  visible.value = true;
  formTitle.value = title;
  resetForm();
  if (id) {
    try {
      formLoading.value = true;
      const res = await getting(id);
      Object.assign(formModel, res.data);
    } finally {
      formLoading.value = false;
    }
  }
};

// 确认按钮
const emit = defineEmits(["refresh"]);
const handleSubmit = async () => {
  const valid = await formRef.value.validate();
  if (!valid) return;
  try {
    formLoading.value = true;
    formModel.${primaryColumn.javaField} ? await updating(formModel) : await creating(formModel);
    message.success(`${formTitle.value}成功！`);
    visible.value = false;
    emit("refresh");
  } finally {
    formLoading.value = false;
  }
};

// 重置表单
const resetForm = () => {
  formModel.${primaryColumn.javaField} = "";
  formRef.value?.resetFields();
};

defineExpose({ openDialog });
</script>

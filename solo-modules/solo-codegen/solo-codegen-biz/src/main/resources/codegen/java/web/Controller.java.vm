package ${table.packageName}.web;

import com.mybatisflex.core.paginate.Page;
import com.solo.common.core.global.R;
import com.solo.common.orm.core.query.Wrappers;
import ${table.packageName}.api.entity.${table.className};
import ${table.packageName}.model.${table.businessName}.${table.className}Convert;
import ${table.packageName}.model.${table.businessName}.req.${modelClassName}CreateReq;
import ${table.packageName}.model.${table.businessName}.req.${modelClassName}QueryReq;
import ${table.packageName}.model.${table.businessName}.req.${modelClassName}UpdateReq;
#if (${table.isSwitch})
import ${table.packageName}.model.${table.businessName}.req.${modelClassName}UpdateStatusReq;
#end
import ${table.packageName}.model.${table.businessName}.resp.${modelClassName}GetResp;
import ${table.packageName}.model.${table.businessName}.resp.${modelClassName}ListResp;
import ${table.packageName}.service.${table.className}Service;
import jakarta.annotation.Resource;
import jakarta.validation.Valid;
import org.springframework.web.bind.annotation.*;

import java.util.Arrays;

/**
 * ${table.functionName}控制器
 * @author $!{table.author}
 * @since ${now}
#if(${table.classTail})
 * ${table.classTail}
#end
 **/
@RestController
@RequestMapping("/${table.moduleName}/${StringUtils.replace(${table.businessName}, '.', '-')}")
public class ${table.className}Controller {

    #set ($className = $table.className.substring(0, 1).toLowerCase() +  ${table.className.substring(1)})
    @Resource
    private ${table.className}Service ${className}Service;

    /**
     * 新增${table.functionName}
     * @param req ${table.functionName}新增对象
     * @return 响应信息
     */
    @PostMapping
    public R<Boolean> create(@Valid @RequestBody ${modelClassName}CreateReq req) {
        ${table.className} entity = ${table.className}Convert.INSTANCE.convert(req);
        return R.success(${className}Service.save(entity));
    }

    /**
     * 删除${table.functionName}
     * @param ${primaryColumn.javaField}s ${table.functionName}集合
     * @return 响应信息
     */
    @DeleteMapping("/{${primaryColumn.javaField}s}")
    public R<Boolean> delete(@PathVariable Long[] ${primaryColumn.javaField}s) {
        return R.success(${className}Service.removeByIds(Arrays.asList(${primaryColumn.javaField}s)));
    }

#if (${table.isSwitch})
    /**
     * ${table.functionName}状态切换
     * @param req ${table.functionName}状态修改对象
     * @return 响应信息
     */
    @PutMapping("/update-status")
    public R<Boolean> updateStatus(@Valid @RequestBody ${modelClassName}UpdateStatusReq req) {
        ${table.className} entity = ${table.className}Convert.INSTANCE.convert(req);
        return R.success(${className}Service.updateById(entity));
    }

#end
    /**
     * 更新${table.functionName}
     * @param req ${table.functionName}更新对象
     * @return 响应信息
     */
    @PutMapping
    public R<Boolean> update(@Valid @RequestBody ${modelClassName}UpdateReq req) {
        ${table.className} entity = ${table.className}Convert.INSTANCE.convert(req);
        return R.success(${className}Service.updateById(entity));
    }

    /**
     * 获取${table.functionName}
     * @param ${primaryColumn.javaField} ${table.functionName}
     * @return 响应信息
     */
    @GetMapping("/{${primaryColumn.javaField}}")
    public R<${modelClassName}GetResp> get(@PathVariable Long ${primaryColumn.javaField}) {
        return R.success(${table.className}Convert.INSTANCE.convertGet(${className}Service.getById(${primaryColumn.javaField})));
    }

    /**
     * 分页查询${table.functionName}列表
     * @param page 分页对象
     * @param req ${table.functionName}查询对象
     * @return 响应信息
     */
    @GetMapping("/page")
    public R<Page<${modelClassName}ListResp>> page(Page<${modelClassName}ListResp> page, ${modelClassName}QueryReq req) {
        Page<${modelClassName}ListResp> list = ${className}Service.pageAs(page, Wrappers.buildWhere(req), ${modelClassName}ListResp.class);
        return R.success(list);
    }

}
